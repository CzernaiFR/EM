---
author:
    - name: "Roger MARTIN"
      email: Roger57que@free.fr
execute: 
  echo: fenced
date: 2024-07-08
---

On a les tirages bien propres sur eux. Et on va apprendre à compter après avoir chargé le `tidyverse`[voir @tidyverse] et les données.

```{r}
load("~/PROJETS/EM/euromil.RData")
library(tidyverse, quietly = TRUE, warn.conflicts = FALSE)
```

# Compter

## Les groupes

Je pense qu'il est illusoire et inutile de se baser simplement sur les numéros sortis. Si c'était possible, cela aurait surement déjà était fait. Et comme ce n'est pas la cas…

### Les sorties et les écarts

Les sorties correspondant aux nombres de fois que chaque numéro et étoile est sorti[^compter-1].

[^compter-1]: en bon français, on appelle ça « enfoncer une porte ouverte »

Les écarts correspondent aux nonbre de tirages entre deux sorties.

::: callout-note
## Par exemple

Soient les $3$ tirages suivants :

```         
 T1  1  2  3
 T2  2  4  5
 T3  1  3  6
```
:::

On part du principe que avant ce tirage toutes les sorties et tous les écarts étaient à $0$.

pour le tirage T1 tous les sorties et les écarts sont à $0$

| numéros |  1  |  2  |  3  |  4  |  5  |  6  |
|:-------:|:---:|:---:|:---:|:---:|:---:|:---:|
| sorties |  0  |  0  |  0  |  0  |  0  |  0  |
| écarts  |  0  |  0  |  0  |  0  |  0  |  0  |

pour le tirage T2 les sorties du tirage précédent augmentent de $1$ alors que les écarts restent à $0$ ; par contre les écarts des numéros *non sortis* augmentent de $1$ ;

| numéros |  1  |  2  |  3  |  4  |  5  |  6  |
|:-------:|:---:|:---:|:---:|:---:|:---:|:---:|
| sorties |  1  |  1  |  1  |  0  |  0  |  0  |
| écarts  |  0  |  0  |  0  |  1  |  1  |  1  |

pour le tirage T3, c'est pareil

| numéros |  1  |  2  |  3  |  4  |  5  |  6  |
|:-------:|:---:|:---:|:---:|:---:|:---:|:---:|
| sorties |  1  |  2  |  1  |  1  |  1  |  0  |
| écarts  |  1  |  0  |  1  |  0  |  0  |  2  |

pour le tirage T4, on met à jour les d'après le tirage T3

| numéros |  1  |  2  |  3  |  4  |  5  |  6  |
|:-------:|:---:|:---:|:---:|:---:|:---:|:---:|
| sorties |  2  |  2  |  2  |  1  |  1  |  1  |
| écarts  |  0  |  1  |  0  |  1  |  1  |  0  |

etc.

## Le code

On va fabriquer deux `tibble`

### Les colonnes

`S_MA`

:   pour le nombre de sorties du mardli

`S_VE`

:   pour le nombre de sorties du vendredi

`S_TO`

:   pour le nombre de sorties en tout

`E_MA`

:   pour les écarts du mardi

`E_VE`

:   pour les écarts du vendredi

`E_TO`

:   pour les écarts en tout

Construire le `tibble` vide[^compter-2] pour les numéros :

[^compter-2]: pas vide, mais rempli de $0$

```{r}
num <- tibble(numero = 1:50,
               So_MA = 0, So_VE = 0, So_TO = 0,
               Ec_MA = 0, Ec_VE = 0, Ec_TO = 0)
```

et pour les étoiles, même motif, même punition :

```{r}
eto <- tibble(etoile = 1:12,
               So_MA = 0, So_VE = 0, So_TO = 0,
               Ec_MA = 0, Ec_VE = 0, Ec_TO = 0)
```

### Classement

Je vais utiliser les verbes de `dplyr`[voir @dplyr].

Le fonctionnement de $R$ est basé sur les vecteurs. `dplyr` est basé sur les `tibble`. C'est précisé en première [page de la présentation de `dplyr`](https://dplyr.tidyverse.org/articles/base.html)

> Aperçu : Le code dplyr n'utilise en entrée et en sortie que des jeux de données. Cela contraste avec les fonctions $R$ de base qui fonctionnent plus fréquemment avec des vecteurs individuels.

```{r}
for (i in 1:150) {
  a <- 
    euromil |> 
    slice(i)
  j <- a$jt
  b <- c(a$b1, a$b2, a$b3, a$b4, a$b5)
  e <- c(a$e1, a$e2)
  
  # pour être sûr que les jours ne soient QUE MA ou VE
  #   un petit test ne fait pas de mal
  flag_jour <- FALSE
  
  # pour les tirages du MArdi
  if (j == "MA") {
    flag_jour <- TRUE
    # incrémente les sorties des numéros
    num$So_MA[b] <- num$So_MA[b] + 1
    # incrémente les sorties des étoiles
    eto$So_MA[e] <- eto$So_MA[e] + 1
    # incrémente tous les écarts des numéros
    num$Ec_MA <- num$Ec_MA + 1
    # incrémente tous les écarts des étoiles
    eto$Ec_MA <- eto$Ec_MA + 1
    # met les écarts des numéros sortis à 0
    num$Ec_MA[b] <- 0
    # met les écarts des étoiles sorties à 0
    eto$Ec_MA[e] <- 0
  }   # fin du test   if (j == "MA")
  
  # pour les tirages du VEndredi
  if (j == "VE") {
    flag_jour <- TRUE
    # incrémente les sorties des numéros
    num$So_VE[b] <- num$So_VE[b] + 1
    # incrémente les sorties des étoiles
    eto$So_VE[e] <- eto$So_VE[e] + 1
    # incrémente tous les écarts des numéros
    num$Ec_VE <- num$Ec_VE + 1
    # incrémente tous les écarts des étoiles
    eto$Ec_VE <- eto$Ec_VE + 1
    # met les écarts des numéros sortis à 0
    num$Ec_VE[b] <- 0
    # met les écarts des étoiles sorties à 0
    eto$Ec_VE[e] <- 0
  }   # fin du test   if (j == "VE")
  
  # si c'est bien un MA ou un VE qui a été 
  #   traité avant
  # traite les tirages en TOut
  if (flag_jour == TRUE)  {
     # incrémente les sorties des numéros
    num$So_TO[b] <- num$So_TO[b] + 1
    # incrémente les sorties des étoiles
    eto$So_TO[e] <- eto$So_TO[e] + 1
    # incrémente tous les écarts des numéros
    num$Ec_TO <- num$Ec_TO + 1
    # incrémente tous les écarts des étoiles
    eto$Ec_TO <- eto$Ec_TO + 1
    # met les écarts des numéros sortis à 0
    num$Ec_TO[b] <- 0
    # met les écarts des étoiles sorties à 0
    eto$Ec_TO[e] <- 0
  }   # fin du test   if (flag_jour == TRUE)
  else  {
    # si le test du jour a raté
    # afficher le tirage incriminé
    print("HORREUR, ERREUR")
    print(a)
    # et on arrête tout
    break
  }   # fin du else
  
}   # fin de la boucle  for (i in 1:XX)
```

#### Récapitulatif des numéros

:::{.callout-note}
- $50$ numéros
- $5$ numéros par tirage
- $150$ tirages « analysés »

Donc :

$5 \times 150 = 750$ numéros tirés

$750 \div 50 = 15$ ; en moyenne, chaque numéro serait sorti $15$ fois pour tous les $150$ tirages et $7,5$ fois pour les $75$ tirages du mardi et du vendredi.
:::

Pour mardi :
```{r}
#| echo: false
summary(num$So_MA)
```
Pour vendredi :
```{r}
#| echo: false
summary(num$So_VE)
```
En tout :
```{r}
#| echo: false
summary(num$So_TO)
```

#### Récapitulatif des étoiles

En partant du même principe que ci-dessus pour les étoiles, on trouve :

$2 \times 150 = 300$ étoiles tirées ;

$300 \div 12 = 25$ ; en moyenne, chaque étoile serait sortie $25$ fois fois pour tous les $150$ tirages et $12,5$ fois pour les $75$ tirages du mardi et du vendredi.

Dont acte :

Pour mardi :
```{r}
#| echo: false
summary(eto$So_MA)
```
Pour vendredi :
```{r}
#| echo: false
summary(eto$So_VE)
```
Et en tout :
```{r}
#| echo: false
summary(eto$So_TO)
```

```{r}
num
```

Puisqu'il faudra (re)classer les données après chaque tirage, autant faire des fonctions pour le classement :

```{r}
classer_num <- function() {
  tibble(numero = 1:50, 
         So_MA = round(percent_rank(num$So_MA) * 100),
         So_VE = round(percent_rank(num$So_VE) * 100),
#         So_TO = round(cume_dist(num$So_TO) * 100),
         # Ec_MA = round(cume_dist(num$Ec_MA) * 100),
         # Ec_VE = round(cume_dist(num$Ec_VE) * 100),
         # Ec_TO = round(cume_dist(num$Ec_TO) * 100)
         )
}

classer_eto <- function() {
  tibble(etoile = 1:12, 
         So_MA = round(percent_rank(eto$So_MA) * 100),
         So_VE = round(percent_rank(eto$So_VE) * 100),
#         So_TO = round(cume_dist(eto$So_TO) * 100),
         # Ec_MA = round(cume_dist(eto$Ec_MA) * 100),
         # Ec_VE = round(cume_dist(eto$Ec_VE) * 100),
         # Ec_TO = round(cume_dist(eto$Ec_TO) * 100)
         )
}
```

```{r}
C_num <- classer_num()
print(C_num, n = 5)
```

```{r}
C_eto <- classer_eto()
print(C_eto)
```


```{r}
C_num_long <- 
  pivot_longer(C_num,
               cols = !numero,
               values_to = "clas",
               names_to = "type")

C_eto_long <- 
  pivot_longer(C_eto,
               cols = !etoile,
               values_to = "clas",
               names_to = "type")
```

```{r}
C_num_long
C_eto_long
```

Pas très explicite. Faut essayer de faire mieux :

```{r}
ggplot(C_eto_long) +
  aes(x = factor(etoile), y = 
        clas, fill = type) +
  geom_col(position = "dodge")

```


